#!/usr/bin/env python3
# glc_msg.py
# Version 4.0.1
# QMDファイル作成とToot送信、Bluesky投稿、Twitter投稿を行う

import yaml
import os
import sys
import pytz
import argparse
from datetime import datetime
from collections import defaultdict

import tweepy
from mastodon import Mastodon
from atproto import Client as AtprotoClient

def load_msg_config():
    """msg.configから設定を読み込む"""
    with open('msg.config', 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

# msg.configから設定を読み込む
MSG_CONFIG = load_msg_config()
TOP_PAGE_FILENAME = MSG_CONFIG['Files']['top_page_filename']

def execute_query(db_name, query):
    # この関数はデータベースクエリを実行するための実装が必要です
    # 例: SQLite3やMySQLなどのデータベース接続とクエリ実行のコード
    pass

def get_updated_targets(db_name):
    query = "SELECT utv.*, st.qmd_name FROM updated_targets_view utv JOIN scraping_targets st ON utv.id = st.id ORDER BY utv.last_update DESC"
    return execute_query(db_name, query)

def get_qmd_targets(db_name):
    return execute_query(db_name, "SELECT * FROM qmd_view")

def sort_key(target):
    return target['last_update']

def generate_quarto_content(updated_targets, qmd_targets):
    jst = pytz.timezone('Asia/Tokyo')
    quarto_content = MSG_CONFIG['QuartoContent']['top_page_yaml'] + MSG_CONFIG['QuartoContent']['top_page_header'] + "\n"
    grouped_results = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))
    
    for target in updated_targets:
        last_update = sort_key(target)
        grouped_results[last_update.year][last_update.month][last_update.day].append(target)
    
    for year in sorted(grouped_results.keys(), reverse=True):
        quarto_content += f'\n## {year}年\n\n'
        for month in sorted(grouped_results[year].keys(), reverse=True):
            quarto_content += f'\n### {year}年{month}月\n\n'
            for day in sorted(grouped_results[year][month].keys(), reverse=True):
                quarto_content += f'\n#### {year}年{month}月{day}日\n\n'
                for target in sorted(grouped_results[year][month][day], key=sort_key, reverse=True):
                    formatted_time = sort_key(target).strftime("%Y年%m月%d日 %H時%M分(日本時間)")
                    archive_link = f"[🪦]({target['archive_url']}){{.external target=\"_blank\"}}" if target.get('archive_url') else ""
                    quarto_content += f"* {formatted_time}、[{target['owner']}]({target['ownerurl']}){{.external target=\"_blank\"}} の [{target['title']}]({target['url']}){{.external target=\"_blank\"}} が更新されました。{archive_link} ([💾]({target['qmd_name']}.qmd){{.external target=\"_blank\"}})\n"
    
    quarto_content += '\n# 全ての更新履歴\n\n'
    for target in qmd_targets:
        quarto_content += f"* [{target['owner']} の {target['title']}]({target['qmd_name']}.qmd){{.external target=\"_blank\"}}\n"
    
    return quarto_content

def generate_qmd_content(updated_targets, qmd_name, title, owner):
    """個別のQMDコンテンツを生成する"""
    jst = pytz.timezone('Asia/Tokyo')
    current_time = datetime.now(jst)

    qmd_content = MSG_CONFIG['indivisualQuartoContent']['individual_page_yaml'].format(owner=owner, title=title)
    
    # ここに個別のQMDコンテンツ生成ロジックを追加する必要があります
    
    return qmd_content

def format_message(target_info, formatted_time):
    return MSG_CONFIG['Message']['format'].format(time=formatted_time, owner=target_info['owner'], title=target_info['title'], url=target_info['url'])

def load_toot_config():
    # Mastodon設定を読み込む関数の実装が必要です
    pass

def send_toot(message, no_toot=False):
    if no_toot:
        print("トゥートメッセージ（送信されません）:", message)
        return
    
    config = load_toot_config()
    if not config:
        return
    
    try:
        mastodon = Mastodon(
            client_id=config['client_id'],
            client_secret=config['client_secret'],
            access_token=config['access_token'],
            api_base_url=config['base_url']
        )
        status = mastodon.status_post(message)
        print("トゥートの送信に成功しました。", f"投稿URL: {status['url']}")
    except Exception as e:
        print(f"トゥートの送信に失敗しました: {str(e)}", f"送信内容: {message}", file=sys.stderr)

def send_bluesky(message, no_toot=False):
    if no_toot:
        print("Blueskyメッセージ（送信されません）:", message)
        return
    
    try:
        client = AtprotoClient()
        client.login(os.getenv('BLUESKY_HANDLE'), os.getenv('BLUESKY_PASSWORD'))
        post = client.send_post(text=message)
        print("Blueskyへの投稿に成功しました。", f"投稿URI: {post.uri}")
    except Exception as e:
        print(f"Blueskyへの投稿に失敗しました: {str(e)}", f"送信内容: {message}", file=sys.stderr)

def send_tweet(message, no_toot=False):
    if no_toot:
        print("Twitterメッセージ（送信されません）:", message)
        return
    
    try:
        client = tweepy.Client(
            consumer_key=os.getenv('TWITTER_API_KEY'),
            consumer_secret=os.getenv('TWITTER_API_SECRET'),
            access_token=os.getenv('TWITTER_ACCESS_TOKEN'),
            access_token_secret=os.getenv('TWITTER_ACCESS_TOKEN_SECRET')
        )
        response = client.create_tweet(text=message)
        print("Twitterへの投稿に成功しました。", f"投稿ID: {response.data['id']}")
    except Exception as e:
        print(f"Twitterへの投稿に失敗しました: {str(e)}", f"送信内容: {message}", file=sys.stderr)

def generate_quarto_output(db_name, no_toot=False):
    updated_targets = get_updated_targets(db_name)
    if not updated_targets:
        print("更新されたターゲットの情報が取得できませんでした。", file=sys.stderr)
        return
    
    qmd_targets = get_qmd_targets(db_name)
    if not qmd_targets:
        print("QMDターゲットの情報が取得できませんでした。", file=sys.stderr)
        return
    
    quarto_content = generate_quarto_content(updated_targets, qmd_targets)
    if quarto_content is None:
        print("Quartoコンテンツの生成に失敗しました。", file=sys.stderr)
        return
    
    with open(TOP_PAGE_FILENAME, 'w', encoding='utf-8') as f:
        f.write(quarto_content)
    print(f"{TOP_PAGE_FILENAME} ファイルが生成されました。", file=sys.stderr)
    
    for target in qmd_targets:
        qmd_content = generate_qmd_content(updated_targets, target['qmd_name'], target['title'], target['owner'])
        with open(f"{target['qmd_name']}.qmd", 'w', encoding='utf-8') as f:
            f.write(qmd_content)
        print(f"{target['qmd_name']}.qmd ファイルが生成されました。", file=sys.stderr)
    
    if updated_targets:
        latest_update = updated_targets[0]
        jst = pytz.timezone('Asia/Tokyo')
        formatted_time = latest_update['last_update'].astimezone(jst).strftime("%Y年%m月%d日 %H時%M分(日本時間)")
        message = format_message(latest_update, formatted_time)
        send_toot(message, no_toot)
        send_bluesky(message, no_toot)
        send_tweet(message, no_toot)

def main():
    parser = argparse.ArgumentParser(description="Generate Quarto output and send toots, Bluesky posts, and tweets for GLC")
    parser.add_argument("--db", required=True, help="Database name")
    parser.add_argument("--no-toot", action="store_true", help="Don't actually send toots, Bluesky posts, or tweets, just print the message")
    args = parser.parse_args()
    
    generate_quarto_output(args.db, args.no_toot)

if __name__ == "__main__":
    main()
